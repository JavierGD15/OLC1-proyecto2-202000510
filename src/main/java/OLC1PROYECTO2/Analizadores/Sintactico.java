
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package OLC1PROYECTO2.Analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import OLC1PROYECTO2.Arbol.Declaracion;
import OLC1PROYECTO2.Arbol.Instrucciones;
import OLC1PROYECTO2.Arbol.Imprimir;
import OLC1PROYECTO2.Arbol.Tipo;
import OLC1PROYECTO2.Arbol.DeclaracionFunciones;
import OLC1PROYECTO2.Arbol.LlamadaFunciones;
import OLC1PROYECTO2.Analizadores.Expresiones.Aritmetica;
import OLC1PROYECTO2.Analizadores.Expresiones.Primitivo;
import OLC1PROYECTO2.Analizadores.Expresiones.Relacional;
import OLC1PROYECTO2.Analizadores.Expresiones.Logica;
import OLC1PROYECTO2.Analizadores.Expresiones.Variable;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\044\000\002\002\004\000\002\002\003\000\002\015" +
    "\004\000\002\015\003\000\002\014\003\000\002\014\003" +
    "\000\002\003\007\000\002\004\005\000\002\004\007\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\004\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\016\004\005\005\013\006\010\007\017\010" +
    "\012\053\007\001\002\000\020\002\ufffe\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\010\ufffe\053\ufffe\001\002\000\004\046" +
    "\uffe2\001\002\000\020\002\ufffc\004\ufffc\005\ufffc\006\ufffc" +
    "\007\ufffc\010\ufffc\053\ufffc\001\002\000\004\054\076\001" +
    "\002\000\004\046\uffe0\001\002\000\020\002\ufffd\004\ufffd" +
    "\005\ufffd\006\ufffd\007\ufffd\010\ufffd\053\ufffd\001\002\000" +
    "\004\046\uffde\001\002\000\004\046\uffe1\001\002\000\020" +
    "\002\000\004\005\005\013\006\010\007\017\010\012\053" +
    "\007\001\002\000\004\002\074\001\002\000\004\046\020" +
    "\001\002\000\004\046\uffdf\001\002\000\006\032\022\045" +
    "\021\001\002\000\022\021\031\040\023\046\033\047\030" +
    "\051\024\052\026\054\027\057\025\001\002\000\020\002" +
    "\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\053\ufffa" +
    "\001\002\000\042\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015" +
    "\ufff2\016\ufff2\017\ufff2\020\ufff2\022\ufff2\023\ufff2\024\ufff2" +
    "\025\ufff2\026\ufff2\027\ufff2\032\ufff2\055\ufff2\001\002\000" +
    "\042\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1" +
    "\017\ufff1\020\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026" +
    "\ufff1\027\ufff1\032\ufff1\055\ufff1\001\002\000\042\011\uffed" +
    "\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020" +
    "\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed" +
    "\032\uffed\055\uffed\001\002\000\042\011\ufff0\012\ufff0\013" +
    "\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\022\ufff0" +
    "\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\032\ufff0\055" +
    "\ufff0\001\002\000\022\021\031\040\023\046\033\047\030" +
    "\051\024\052\026\054\027\057\025\001\002\000\042\011" +
    "\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee" +
    "\020\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027" +
    "\uffee\032\uffee\055\uffee\001\002\000\022\021\031\040\023" +
    "\046\033\047\030\051\024\052\026\054\027\057\025\001" +
    "\002\000\040\011\047\012\043\013\040\014\034\015\045" +
    "\016\044\017\052\020\035\022\037\023\051\024\041\025" +
    "\046\026\036\027\050\032\042\001\002\000\042\011\uffef" +
    "\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020" +
    "\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef" +
    "\032\uffef\055\uffef\001\002\000\022\021\031\040\023\046" +
    "\033\047\030\051\024\052\026\054\027\057\025\001\002" +
    "\000\022\021\031\040\023\046\033\047\030\051\024\052" +
    "\026\054\027\057\025\001\002\000\022\021\031\040\023" +
    "\046\033\047\030\051\024\052\026\054\027\057\025\001" +
    "\002\000\022\021\031\040\023\046\033\047\030\051\024" +
    "\052\026\054\027\057\025\001\002\000\022\021\031\040" +
    "\023\046\033\047\030\051\024\052\026\054\027\057\025" +
    "\001\002\000\022\021\031\040\023\046\033\047\030\051" +
    "\024\052\026\054\027\057\025\001\002\000\020\002\ufff9" +
    "\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\053\ufff9\001" +
    "\002\000\022\021\031\040\023\046\033\047\030\051\024" +
    "\052\026\054\027\057\025\001\002\000\022\021\031\040" +
    "\023\046\033\047\030\051\024\052\026\054\027\057\025" +
    "\001\002\000\022\021\031\040\023\046\033\047\030\051" +
    "\024\052\026\054\027\057\025\001\002\000\022\021\031" +
    "\040\023\046\033\047\030\051\024\052\026\054\027\057" +
    "\025\001\002\000\022\021\031\040\023\046\033\047\030" +
    "\051\024\052\026\054\027\057\025\001\002\000\022\021" +
    "\031\040\023\046\033\047\030\051\024\052\026\054\027" +
    "\057\025\001\002\000\022\021\031\040\023\046\033\047" +
    "\030\051\024\052\026\054\027\057\025\001\002\000\022" +
    "\021\031\040\023\046\033\047\030\051\024\052\026\054" +
    "\027\057\025\001\002\000\042\011\047\012\043\013\040" +
    "\014\034\015\045\016\044\017\uffe5\020\035\022\037\023" +
    "\051\024\041\025\046\026\036\027\050\032\uffe5\055\uffe5" +
    "\001\002\000\042\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015" +
    "\ufff7\016\ufff7\017\ufff7\020\ufff7\022\ufff7\023\ufff7\024\041" +
    "\025\046\026\036\027\050\032\ufff7\055\ufff7\001\002\000" +
    "\042\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3" +
    "\017\ufff3\020\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026" +
    "\036\027\050\032\ufff3\055\ufff3\001\002\000\042\011\uffe9" +
    "\012\uffe9\013\040\014\034\015\045\016\044\017\uffe9\020" +
    "\uffe9\022\037\023\051\024\041\025\046\026\036\027\050" +
    "\032\uffe9\055\uffe9\001\002\000\042\011\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\025\ufff5\026\036\027\050\032\ufff5\055" +
    "\ufff5\001\002\000\042\011\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\020\uffe7\022\037\023\051\024" +
    "\041\025\046\026\036\027\050\032\uffe7\055\uffe7\001\002" +
    "\000\042\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016" +
    "\uffeb\017\uffeb\020\uffeb\022\037\023\051\024\041\025\046" +
    "\026\036\027\050\032\uffeb\055\uffeb\001\002\000\042\011" +
    "\uffe8\012\uffe8\013\040\014\034\015\045\016\044\017\uffe8" +
    "\020\uffe8\022\037\023\051\024\041\025\046\026\036\027" +
    "\050\032\uffe8\055\uffe8\001\002\000\042\011\ufff6\012\ufff6" +
    "\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\022" +
    "\ufff6\023\ufff6\024\ufff6\025\ufff6\026\036\027\050\032\ufff6" +
    "\055\ufff6\001\002\000\042\011\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\022\037\023\051" +
    "\024\041\025\046\026\036\027\050\032\uffe6\055\uffe6\001" +
    "\002\000\042\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8" +
    "\016\ufff8\017\ufff8\020\ufff8\022\ufff8\023\ufff8\024\041\025" +
    "\046\026\036\027\050\032\ufff8\055\ufff8\001\002\000\042" +
    "\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017" +
    "\ufff4\020\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\036" +
    "\027\ufff4\032\ufff4\055\ufff4\001\002\000\042\011\047\012" +
    "\043\013\040\014\034\015\045\016\044\017\uffe4\020\uffe4" +
    "\022\037\023\051\024\041\025\046\026\036\027\050\032" +
    "\uffe4\055\uffe4\001\002\000\042\011\uffea\012\uffea\013\uffea" +
    "\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\022\037\023" +
    "\051\024\041\025\046\026\036\027\050\032\uffea\055\uffea" +
    "\001\002\000\042\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015" +
    "\uffe3\016\uffe3\017\uffe3\020\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\025\uffe3\026\036\027\050\032\uffe3\055\uffe3\001\002\000" +
    "\040\011\047\012\043\013\040\014\034\015\045\016\044" +
    "\017\052\020\035\022\037\023\051\024\041\025\046\026" +
    "\036\027\050\055\073\001\002\000\042\011\uffec\012\uffec" +
    "\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\022" +
    "\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\032\uffec" +
    "\055\uffec\001\002\000\004\002\001\001\002\000\020\002" +
    "\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\053\uffff" +
    "\001\002\000\022\021\031\040\023\046\033\047\030\051" +
    "\024\052\026\054\027\057\025\001\002\000\040\011\047" +
    "\012\043\013\040\014\034\015\045\016\044\017\052\020" +
    "\035\022\037\023\051\024\041\025\046\026\036\027\050" +
    "\055\100\001\002\000\004\032\101\001\002\000\020\002" +
    "\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\053\ufffb" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\016\002\014\003\010\004\005\013\015\014" +
    "\003\015\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\010\004\005\013\015\014\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\071\001\001\000\002\001\001\000\004\005" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\067\001\001\000\004\005\066\001\001\000\004\005" +
    "\065\001\001\000\004\005\064\001\001\000\004\005\063" +
    "\001\001\000\004\005\062\001\001\000\002\001\001\000" +
    "\004\005\061\001\001\000\004\005\060\001\001\000\004" +
    "\005\057\001\001\000\004\005\056\001\001\000\004\005" +
    "\055\001\001\000\004\005\054\001\001\000\004\005\053" +
    "\001\001\000\004\005\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public LinkedList<Instrucciones> AST;
  
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  
    public LinkedList<Instrucciones> getAST() {
        return AST;
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= INSTRUCCIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instrucciones> a = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
   
    parser.AST=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instrucciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instrucciones> a = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a; RESULT.add(b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instrucciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new LinkedList<>(); RESULT.add(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DEFPRINT 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DEFPRINT ::= RIMPRIMIR PARIZQ EXPRESION PARDER PTCOMA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT=new Imprimir(a,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFPRINT",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION ::= tipo IDENTIFICADOR PTCOMA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo.tipos a = (Tipo.tipos)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Declaracion(b,a,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACION ::= tipo IDENTIFICADOR ASIGNACION EXPRESION PTCOMA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Tipo.tipos a = (Tipo.tipos)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Declaracion(b,a,aleft,aright,c);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXPRESION ::= EXPRESION SUMA EXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Aritmetica(Aritmetica.OperadorAritmetico.SUMA,aleft,aright,a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXPRESION ::= EXPRESION RESTA EXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Aritmetica(Aritmetica.OperadorAritmetico.RESTA,aleft,aright,a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXPRESION ::= EXPRESION MULT EXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Aritmetica(Aritmetica.OperadorAritmetico.MULT,aleft,aright,a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXPRESION ::= EXPRESION DIV EXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Aritmetica(Aritmetica.OperadorAritmetico.DIV,aleft,aright,a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPRESION ::= EXPRESION POTE EXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Aritmetica(Aritmetica.OperadorAritmetico.POTE,aleft,aright,a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Aritmetica(Aritmetica.OperadorAritmetico.MODULO,aleft,aright,a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPRESION ::= DIGITO 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Primitivo(Tipo.tipos.INT,a,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPRESION ::= DECIMAL 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Primitivo(Tipo.tipos.DOUBLE,a,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPRESION ::= CARACTERES 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Primitivo(Tipo.tipos.CHAR,a,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRESION ::= IDENTIFICADOR 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Variable(aleft,aright, a.toLowerCase());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESION ::= PARRAF 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Primitivo(Tipo.tipos.STRING,a,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESION ::= BOOL 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Primitivo(Tipo.tipos.BOOLEAN,a,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESION ::= PARIZQ EXPRESION PARDER 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESION ::= EXPRESION MAYORIGUAL EXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Relacional( Relacional.OperadorRelacional.MAYORIGUAL, aleft, aright, a, b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION ::= EXPRESION MENORIGUAL EXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Relacional( Relacional.OperadorRelacional.MENORIGUAL, aleft, aright, a, b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION ::= EXPRESION IGUAL EXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Relacional( Relacional.OperadorRelacional.IGUAL, aleft, aright, a, b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESION ::= EXPRESION DIFERENCIA EXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Relacional( Relacional.OperadorRelacional.DIFERENCIA, aleft, aright, a, b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Relacional( Relacional.OperadorRelacional.MAYOR, aleft, aright, a, b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Relacional( Relacional.OperadorRelacional.MENOR, aleft, aright, a, b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Logica( Logica.OperadorLogico.OR, aleft, aright, a, b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Logica( Logica.OperadorLogico.AND, aleft, aright, a, b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= NOT EXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Logica( Logica.OperadorLogico.NOT, aleft, aright, a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo ::= INT 
            {
              Tipo.tipos RESULT =null;
		RESULT=Tipo.tipos.INT;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo ::= DOUBLE 
            {
              Tipo.tipos RESULT =null;
		RESULT=Tipo.tipos.DOUBLE;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipo ::= BOOLEAN 
            {
              Tipo.tipos RESULT =null;
		RESULT=Tipo.tipos.BOOLEAN;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipo ::= CHAR 
            {
              Tipo.tipos RESULT =null;
		RESULT=Tipo.tipos.CHAR;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipo ::= STRING 
            {
              Tipo.tipos RESULT =null;
		RESULT=Tipo.tipos.STRING;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
