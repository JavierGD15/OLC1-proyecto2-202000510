
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package OLC1PROYECTO2.Analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import OLC1PROYECTO2.Arbol.Declaracion;
import OLC1PROYECTO2.Arbol.Instrucciones;
import OLC1PROYECTO2.Arbol.Imprimir;
import OLC1PROYECTO2.Arbol.Tipo;
import OLC1PROYECTO2.Arbol.DeclaracionFunciones;
import OLC1PROYECTO2.Arbol.DeclaracionMetodos;
import OLC1PROYECTO2.Arbol.LlamadaFunciones;
import OLC1PROYECTO2.Arbol.InstruccionReturn;
import OLC1PROYECTO2.Arbol.InstruccionIf;
import OLC1PROYECTO2.Arbol.InstruccionIfElse;
import OLC1PROYECTO2.Arbol.InstruccionIfElseIf;
import OLC1PROYECTO2.Arbol.InstruccionWhile;
import OLC1PROYECTO2.Arbol.Exec;
import OLC1PROYECTO2.Analizadores.Expresiones.Aritmetica;
import OLC1PROYECTO2.Analizadores.Expresiones.Primitivo;
import OLC1PROYECTO2.Analizadores.Expresiones.Relacional;
import OLC1PROYECTO2.Analizadores.Expresiones.Logica;
import OLC1PROYECTO2.Analizadores.Expresiones.Variable;
import OLC1PROYECTO2.Analizadores.Expresiones.Incremento;
import OLC1PROYECTO2.Analizadores.Expresiones.Decremento;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\003\000\002\025" +
    "\004\000\002\025\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\004\000\002\024\005\000\002\024\003\000\002" +
    "\024\003\000\002\003\007\000\002\005\005\000\002\005" +
    "\007\000\002\014\012\000\002\014\011\000\002\015\012" +
    "\000\002\015\011\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\004\000\002\006\003\000\002\006\003\000\002\011\004" +
    "\000\002\011\004\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\004\004\000\002\004\005\000\002\016\006\000\002\016" +
    "\005\000\002\013\005\000\002\013\003\000\002\012\006" +
    "\000\002\012\004\000\002\007\011\000\002\007\015\000" +
    "\002\007\013\000\002\010\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\032\004\011\005\032\006\023\007\012\010" +
    "\024\046\026\053\015\060\020\061\031\062\005\063\021" +
    "\071\013\001\002\000\036\002\ufffb\004\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\010\ufffb\036\ufffb\046\ufffb\053\ufffb\060\ufffb" +
    "\061\ufffb\062\ufffb\063\ufffb\071\ufffb\001\002\000\004\046" +
    "\026\001\002\000\036\002\ufffe\004\ufffe\005\ufffe\006\ufffe" +
    "\007\ufffe\010\ufffe\036\ufffe\046\ufffe\053\ufffe\060\ufffe\061" +
    "\ufffe\062\ufffe\063\ufffe\071\ufffe\001\002\000\004\046\171" +
    "\001\002\000\036\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007" +
    "\ufffd\010\ufffd\036\ufffd\046\ufffd\053\ufffd\060\ufffd\061\ufffd" +
    "\062\ufffd\063\ufffd\071\ufffd\001\002\000\004\046\uffd3\001" +
    "\002\000\004\046\uffd0\001\002\000\004\054\163\001\002" +
    "\000\004\032\162\001\002\000\004\054\156\001\002\000" +
    "\036\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc" +
    "\036\ufffc\046\ufffc\053\ufffc\060\ufffc\061\ufffc\062\ufffc\063" +
    "\ufffc\071\ufffc\001\002\000\034\002\000\004\011\005\032" +
    "\006\023\007\012\010\024\046\026\053\015\060\020\061" +
    "\031\062\005\063\021\071\013\001\002\000\024\021\067" +
    "\032\153\040\056\046\072\047\064\051\057\052\063\054" +
    "\062\057\060\001\002\000\004\054\140\001\002\000\004" +
    "\002\137\001\002\000\004\046\uffd1\001\002\000\004\046" +
    "\uffcf\001\002\000\036\002\ufff5\004\ufff5\005\ufff5\006\ufff5" +
    "\007\ufff5\010\ufff5\036\ufff5\046\ufff5\053\ufff5\060\ufff5\061" +
    "\ufff5\062\ufff5\063\ufff5\071\ufff5\001\002\000\004\054\055" +
    "\001\002\000\036\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\036\ufffa\046\ufffa\053\ufffa\060\ufffa\061\ufffa" +
    "\062\ufffa\063\ufffa\071\ufffa\001\002\000\036\002\ufff6\004" +
    "\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\036\ufff6\046\ufff6" +
    "\053\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6\071\ufff6\001" +
    "\002\000\004\046\034\001\002\000\004\046\uffd2\001\002" +
    "\000\036\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010" +
    "\ufff9\036\ufff9\046\ufff9\053\ufff9\060\ufff9\061\ufff9\062\ufff9" +
    "\063\ufff9\071\ufff9\001\002\000\004\054\035\001\002\000" +
    "\016\004\011\005\032\006\023\007\012\010\024\055\036" +
    "\001\002\000\004\035\052\001\002\000\004\046\051\001" +
    "\002\000\006\034\041\055\042\001\002\000\014\004\011" +
    "\005\032\006\023\007\012\010\024\001\002\000\004\035" +
    "\043\001\002\000\032\004\011\005\032\006\023\007\012" +
    "\010\024\046\026\053\015\060\020\061\031\062\005\063" +
    "\021\071\013\001\002\000\034\004\011\005\032\006\023" +
    "\007\012\010\024\036\046\046\026\053\015\060\020\061" +
    "\031\062\005\063\021\071\013\001\002\000\036\002\uffff" +
    "\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\036\uffff\046" +
    "\uffff\053\uffff\060\uffff\061\uffff\062\uffff\063\uffff\071\uffff" +
    "\001\002\000\036\002\uffef\004\uffef\005\uffef\006\uffef\007" +
    "\uffef\010\uffef\036\uffef\046\uffef\053\uffef\060\uffef\061\uffef" +
    "\062\uffef\063\uffef\071\uffef\001\002\000\004\046\050\001" +
    "\002\000\006\034\uffc8\055\uffc8\001\002\000\006\034\uffc7" +
    "\055\uffc7\001\002\000\032\004\011\005\032\006\023\007" +
    "\012\010\024\046\026\053\015\060\020\061\031\062\005" +
    "\063\021\071\013\001\002\000\034\004\011\005\032\006" +
    "\023\007\012\010\024\036\054\046\026\053\015\060\020" +
    "\061\031\062\005\063\021\071\013\001\002\000\036\002" +
    "\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\036\uffee" +
    "\046\uffee\053\uffee\060\uffee\061\uffee\062\uffee\063\uffee\071" +
    "\uffee\001\002\000\024\021\067\040\056\046\072\047\064" +
    "\051\057\052\063\054\062\055\066\057\060\001\002\000" +
    "\050\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7" +
    "\017\uffe7\020\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\027\uffe7\032\uffe7\034\uffe7\055\uffe7\074\uffe7\075\uffe7" +
    "\001\002\000\050\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\032\uffe6\034\uffe6\055\uffe6\074" +
    "\uffe6\075\uffe6\001\002\000\050\011\uffe2\012\uffe2\013\uffe2" +
    "\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\022\uffe2\023" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\032\uffe2\034\uffe2" +
    "\055\uffe2\074\uffe2\075\uffe2\001\002\000\050\011\uffd7\012" +
    "\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\032" +
    "\uffd7\034\uffd7\055\uffd7\074\uffd7\075\uffd7\001\002\000\022" +
    "\021\067\040\056\046\072\047\064\051\057\052\063\054" +
    "\062\057\060\001\002\000\050\011\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\032\uffe5\034\uffe5" +
    "\055\uffe5\074\uffe5\075\uffe5\001\002\000\050\011\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\032" +
    "\uffe3\034\uffe3\055\uffe3\074\uffe3\075\uffe3\001\002\000\050" +
    "\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\032\uffd6\034\uffd6\055\uffd6\074\uffd6\075\uffd6\001" +
    "\002\000\050\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb" +
    "\016\uffcb\017\uffcb\020\uffcb\022\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\027\uffcb\032\uffcb\034\uffcb\055\uffcb\074\uffcb" +
    "\075\uffcb\001\002\000\022\021\067\040\056\046\072\047" +
    "\064\051\057\052\063\054\062\057\060\001\002\000\006" +
    "\034\131\055\132\001\002\000\046\011\107\012\102\013" +
    "\100\014\074\015\106\016\103\017\112\020\073\022\077" +
    "\023\111\024\101\025\105\026\075\027\110\034\uffc9\055" +
    "\uffc9\074\076\075\104\001\002\000\052\011\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\022" +
    "\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\032\uffe4" +
    "\034\uffe4\054\055\055\uffe4\074\uffe4\075\uffe4\001\002\000" +
    "\022\021\067\040\056\046\072\047\064\051\057\052\063" +
    "\054\062\057\060\001\002\000\022\021\067\040\056\046" +
    "\072\047\064\051\057\052\063\054\062\057\060\001\002" +
    "\000\022\021\067\040\056\046\072\047\064\051\057\052" +
    "\063\054\062\057\060\001\002\000\050\011\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\022" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\032\uffd5" +
    "\034\uffd5\055\uffd5\074\uffd5\075\uffd5\001\002\000\022\021" +
    "\067\040\056\046\072\047\064\051\057\052\063\054\062" +
    "\057\060\001\002\000\022\021\067\040\056\046\072\047" +
    "\064\051\057\052\063\054\062\057\060\001\002\000\022" +
    "\021\067\040\056\046\072\047\064\051\057\052\063\054" +
    "\062\057\060\001\002\000\022\021\067\040\056\046\072" +
    "\047\064\051\057\052\063\054\062\057\060\001\002\000" +
    "\022\021\067\040\056\046\072\047\064\051\057\052\063" +
    "\054\062\057\060\001\002\000\050\011\uffd4\012\uffd4\013" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\032\uffd4\034" +
    "\uffd4\055\uffd4\074\uffd4\075\uffd4\001\002\000\022\021\067" +
    "\040\056\046\072\047\064\051\057\052\063\054\062\057" +
    "\060\001\002\000\022\021\067\040\056\046\072\047\064" +
    "\051\057\052\063\054\062\057\060\001\002\000\022\021" +
    "\067\040\056\046\072\047\064\051\057\052\063\054\062" +
    "\057\060\001\002\000\022\021\067\040\056\046\072\047" +
    "\064\051\057\052\063\054\062\057\060\001\002\000\022" +
    "\021\067\040\056\046\072\047\064\051\057\052\063\054" +
    "\062\057\060\001\002\000\022\021\067\040\056\046\072" +
    "\047\064\051\057\052\063\054\062\057\060\001\002\000" +
    "\050\011\107\012\102\013\100\014\074\015\106\016\103" +
    "\017\uffda\020\073\022\077\023\111\024\101\025\105\026" +
    "\075\027\110\032\uffda\034\uffda\055\uffda\074\uffda\075\uffda" +
    "\001\002\000\050\011\uffec\012\uffec\013\uffec\014\uffec\015" +
    "\uffec\016\uffec\017\uffec\020\uffec\022\uffec\023\uffec\024\101" +
    "\025\105\026\075\027\110\032\uffec\034\uffec\055\uffec\074" +
    "\uffec\075\uffec\001\002\000\050\011\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\026\075\027\110\032\uffe8\034\uffe8" +
    "\055\uffe8\074\uffe8\075\uffe8\001\002\000\050\011\uffde\012" +
    "\uffde\013\100\014\074\015\106\016\103\017\uffde\020\uffde" +
    "\022\077\023\111\024\101\025\105\026\075\027\110\032" +
    "\uffde\034\uffde\055\uffde\074\uffde\075\uffde\001\002\000\050" +
    "\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\022\077\023\111\024\101\025\105\026\075" +
    "\027\110\032\uffdc\034\uffdc\055\uffdc\074\uffdc\075\uffdc\001" +
    "\002\000\050\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea" +
    "\016\uffea\017\uffea\020\uffea\022\uffea\023\uffea\024\uffea\025" +
    "\uffea\026\075\027\110\032\uffea\034\uffea\055\uffea\074\uffea" +
    "\075\uffea\001\002\000\050\011\uffe0\012\uffe0\013\uffe0\014" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\022\077\023\111" +
    "\024\101\025\105\026\075\027\110\032\uffe0\034\uffe0\055" +
    "\uffe0\074\uffe0\075\uffe0\001\002\000\050\011\uffdd\012\uffdd" +
    "\013\100\014\074\015\106\016\103\017\uffdd\020\uffdd\022" +
    "\077\023\111\024\101\025\105\026\075\027\110\032\uffdd" +
    "\034\uffdd\055\uffdd\074\uffdd\075\uffdd\001\002\000\050\011" +
    "\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb" +
    "\020\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\075\027" +
    "\110\032\uffeb\034\uffeb\055\uffeb\074\uffeb\075\uffeb\001\002" +
    "\000\050\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016" +
    "\uffdb\017\uffdb\020\uffdb\022\077\023\111\024\101\025\105" +
    "\026\075\027\110\032\uffdb\034\uffdb\055\uffdb\074\uffdb\075" +
    "\uffdb\001\002\000\050\011\uffed\012\uffed\013\uffed\014\uffed" +
    "\015\uffed\016\uffed\017\uffed\020\uffed\022\uffed\023\uffed\024" +
    "\101\025\105\026\075\027\110\032\uffed\034\uffed\055\uffed" +
    "\074\uffed\075\uffed\001\002\000\050\011\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\026\075\027\uffe9\032\uffe9\034" +
    "\uffe9\055\uffe9\074\uffe9\075\uffe9\001\002\000\050\011\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020" +
    "\uffdf\022\077\023\111\024\101\025\105\026\075\027\110" +
    "\032\uffdf\034\uffdf\055\uffdf\074\uffdf\075\uffdf\001\002\000" +
    "\050\011\107\012\102\013\100\014\074\015\106\016\103" +
    "\017\uffd9\020\uffd9\022\077\023\111\024\101\025\105\026" +
    "\075\027\110\032\uffd9\034\uffd9\055\uffd9\074\uffd9\075\uffd9" +
    "\001\002\000\022\021\067\040\056\046\072\047\064\051" +
    "\057\052\063\054\062\057\060\001\002\000\050\011\uffcc" +
    "\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020" +
    "\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\032\uffcc\034\uffcc\055\uffcc\074\uffcc\075\uffcc\001\002\000" +
    "\046\011\107\012\102\013\100\014\074\015\106\016\103" +
    "\017\112\020\073\022\077\023\111\024\101\025\105\026" +
    "\075\027\110\034\uffca\055\uffca\074\076\075\104\001\002" +
    "\000\050\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\017\uffd8\020\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8" +
    "\026\075\027\110\032\uffd8\034\uffd8\055\uffd8\074\uffd8\075" +
    "\uffd8\001\002\000\044\011\107\012\102\013\100\014\074" +
    "\015\106\016\103\017\112\020\073\022\077\023\111\024" +
    "\101\025\105\026\075\027\110\055\136\074\076\075\104" +
    "\001\002\000\050\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\017\uffe1\020\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\032\uffe1\034\uffe1\055\uffe1\074" +
    "\uffe1\075\uffe1\001\002\000\004\002\001\001\002\000\022" +
    "\021\067\040\056\046\072\047\064\051\057\052\063\054" +
    "\062\057\060\001\002\000\044\011\107\012\102\013\100" +
    "\014\074\015\106\016\103\017\112\020\073\022\077\023" +
    "\111\024\101\025\105\026\075\027\110\055\142\074\076" +
    "\075\104\001\002\000\004\035\143\001\002\000\032\004" +
    "\011\005\032\006\023\007\012\010\024\046\026\053\015" +
    "\060\020\061\031\062\005\063\021\071\013\001\002\000" +
    "\034\004\011\005\032\006\023\007\012\010\024\036\145" +
    "\046\026\053\015\060\020\061\031\062\005\063\021\071" +
    "\013\001\002\000\040\002\uffc6\004\uffc6\005\uffc6\006\uffc6" +
    "\007\uffc6\010\uffc6\036\uffc6\046\uffc6\053\uffc6\060\uffc6\061" +
    "\uffc6\062\uffc6\063\uffc6\064\146\071\uffc6\001\002\000\006" +
    "\035\150\063\021\001\002\000\036\002\uffc4\004\uffc4\005" +
    "\uffc4\006\uffc4\007\uffc4\010\uffc4\036\uffc4\046\uffc4\053\uffc4" +
    "\060\uffc4\061\uffc4\062\uffc4\063\uffc4\071\uffc4\001\002\000" +
    "\032\004\011\005\032\006\023\007\012\010\024\046\026" +
    "\053\015\060\020\061\031\062\005\063\021\071\013\001" +
    "\002\000\034\004\011\005\032\006\023\007\012\010\024" +
    "\036\152\046\026\053\015\060\020\061\031\062\005\063" +
    "\021\071\013\001\002\000\036\002\uffc5\004\uffc5\005\uffc5" +
    "\006\uffc5\007\uffc5\010\uffc5\036\uffc5\046\uffc5\053\uffc5\060" +
    "\uffc5\061\uffc5\062\uffc5\063\uffc5\071\uffc5\001\002\000\036" +
    "\002\uffce\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce\036" +
    "\uffce\046\uffce\053\uffce\060\uffce\061\uffce\062\uffce\063\uffce" +
    "\071\uffce\001\002\000\044\011\107\012\102\013\100\014" +
    "\074\015\106\016\103\017\112\020\073\022\077\023\111" +
    "\024\101\025\105\026\075\027\110\032\155\074\076\075" +
    "\104\001\002\000\036\002\uffcd\004\uffcd\005\uffcd\006\uffcd" +
    "\007\uffcd\010\uffcd\036\uffcd\046\uffcd\053\uffcd\060\uffcd\061" +
    "\uffcd\062\uffcd\063\uffcd\071\uffcd\001\002\000\022\021\067" +
    "\040\056\046\072\047\064\051\057\052\063\054\062\057" +
    "\060\001\002\000\044\011\107\012\102\013\100\014\074" +
    "\015\106\016\103\017\112\020\073\022\077\023\111\024" +
    "\101\025\105\026\075\027\110\055\160\074\076\075\104" +
    "\001\002\000\004\032\161\001\002\000\036\002\ufff4\004" +
    "\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\036\ufff4\046\ufff4" +
    "\053\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\071\ufff4\001" +
    "\002\000\036\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\010\ufff8\036\ufff8\046\ufff8\053\ufff8\060\ufff8\061\ufff8\062" +
    "\ufff8\063\ufff8\071\ufff8\001\002\000\022\021\067\040\056" +
    "\046\072\047\064\051\057\052\063\054\062\057\060\001" +
    "\002\000\044\011\107\012\102\013\100\014\074\015\106" +
    "\016\103\017\112\020\073\022\077\023\111\024\101\025" +
    "\105\026\075\027\110\055\165\074\076\075\104\001\002" +
    "\000\004\035\166\001\002\000\032\004\011\005\032\006" +
    "\023\007\012\010\024\046\026\053\015\060\020\061\031" +
    "\062\005\063\021\071\013\001\002\000\034\004\011\005" +
    "\032\006\023\007\012\010\024\036\170\046\026\053\015" +
    "\060\020\061\031\062\005\063\021\071\013\001\002\000" +
    "\036\002\uffc3\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3" +
    "\036\uffc3\046\uffc3\053\uffc3\060\uffc3\061\uffc3\062\uffc3\063" +
    "\uffc3\071\uffc3\001\002\000\010\032\174\045\172\054\173" +
    "\001\002\000\022\021\067\040\056\046\072\047\064\051" +
    "\057\052\063\054\062\057\060\001\002\000\016\004\011" +
    "\005\032\006\023\007\012\010\024\055\175\001\002\000" +
    "\036\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3" +
    "\036\ufff3\046\ufff3\053\ufff3\060\ufff3\061\ufff3\062\ufff3\063" +
    "\ufff3\071\ufff3\001\002\000\004\035\203\001\002\000\006" +
    "\034\041\055\177\001\002\000\004\035\200\001\002\000" +
    "\032\004\011\005\032\006\023\007\012\010\024\046\026" +
    "\053\015\060\020\061\031\062\005\063\021\071\013\001" +
    "\002\000\034\004\011\005\032\006\023\007\012\010\024" +
    "\036\202\046\026\053\015\060\020\061\031\062\005\063" +
    "\021\071\013\001\002\000\036\002\ufff1\004\ufff1\005\ufff1" +
    "\006\ufff1\007\ufff1\010\ufff1\036\ufff1\046\ufff1\053\ufff1\060" +
    "\ufff1\061\ufff1\062\ufff1\063\ufff1\071\ufff1\001\002\000\032" +
    "\004\011\005\032\006\023\007\012\010\024\046\026\053" +
    "\015\060\020\061\031\062\005\063\021\071\013\001\002" +
    "\000\034\004\011\005\032\006\023\007\012\010\024\036" +
    "\205\046\026\053\015\060\020\061\031\062\005\063\021" +
    "\071\013\001\002\000\036\002\ufff0\004\ufff0\005\ufff0\006" +
    "\ufff0\007\ufff0\010\ufff0\036\ufff0\046\ufff0\053\ufff0\060\ufff0" +
    "\061\ufff0\062\ufff0\063\ufff0\071\ufff0\001\002\000\044\011" +
    "\107\012\102\013\100\014\074\015\106\016\103\017\112" +
    "\020\073\022\077\023\111\024\101\025\105\026\075\027" +
    "\110\032\207\074\076\075\104\001\002\000\036\002\ufff2" +
    "\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\036\ufff2\046" +
    "\ufff2\053\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\071\ufff2" +
    "\001\002\000\004\032\211\001\002\000\036\002\ufff7\004" +
    "\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\036\ufff7\046\ufff7" +
    "\053\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\071\ufff7\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\032\002\021\003\007\004\032\005\015\007" +
    "\027\010\024\014\003\015\026\016\013\023\006\024\005" +
    "\025\016\001\001\000\002\001\001\000\004\016\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\007\004\032\005\015\007\027\010\024\014\003\015" +
    "\026\016\013\023\006\024\044\001\001\000\010\006\153" +
    "\011\060\016\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\037\023\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\046" +
    "\001\001\000\002\001\001\000\030\003\007\004\032\005" +
    "\015\007\027\010\024\014\003\015\026\016\013\023\006" +
    "\024\005\025\043\001\001\000\026\003\007\004\032\005" +
    "\015\007\027\010\024\014\003\015\026\016\013\023\006" +
    "\024\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\007\004\032\005\015\007\027\010\024\014\003\015" +
    "\026\016\013\023\006\024\005\025\052\001\001\000\026" +
    "\003\007\004\032\005\015\007\027\010\024\014\003\015" +
    "\026\016\013\023\006\024\044\001\001\000\002\001\001" +
    "\000\012\006\070\011\060\013\067\016\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\134\011\060\016\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\133\011\060\016\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\127\011\060\016\064\001\001\000\010\006\126\011" +
    "\060\016\064\001\001\000\010\006\125\011\060\016\064" +
    "\001\001\000\002\001\001\000\010\006\124\011\060\016" +
    "\064\001\001\000\010\006\123\011\060\016\064\001\001" +
    "\000\010\006\122\011\060\016\064\001\001\000\010\006" +
    "\121\011\060\016\064\001\001\000\010\006\120\011\060" +
    "\016\064\001\001\000\002\001\001\000\010\006\117\011" +
    "\060\016\064\001\001\000\010\006\116\011\060\016\064" +
    "\001\001\000\010\006\115\011\060\016\064\001\001\000" +
    "\010\006\114\011\060\016\064\001\001\000\010\006\113" +
    "\011\060\016\064\001\001\000\010\006\112\011\060\016" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\132\011\060" +
    "\016\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\140\011\060\016\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\007\004\032" +
    "\005\015\007\027\010\024\014\003\015\026\016\013\023" +
    "\006\024\005\025\143\001\001\000\026\003\007\004\032" +
    "\005\015\007\027\010\024\014\003\015\026\016\013\023" +
    "\006\024\044\001\001\000\002\001\001\000\004\007\146" +
    "\001\001\000\002\001\001\000\030\003\007\004\032\005" +
    "\015\007\027\010\024\014\003\015\026\016\013\023\006" +
    "\024\005\025\150\001\001\000\026\003\007\004\032\005" +
    "\015\007\027\010\024\014\003\015\026\016\013\023\006" +
    "\024\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\156\011\060" +
    "\016\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\163\011\060" +
    "\016\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\007\004\032\005\015\007\027\010\024\014\003" +
    "\015\026\016\013\023\006\024\005\025\166\001\001\000" +
    "\026\003\007\004\032\005\015\007\027\010\024\014\003" +
    "\015\026\016\013\023\006\024\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\205\011\060\016\064" +
    "\001\001\000\006\012\175\023\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\007\004\032\005\015\007\027\010\024\014" +
    "\003\015\026\016\013\023\006\024\005\025\200\001\001" +
    "\000\026\003\007\004\032\005\015\007\027\010\024\014" +
    "\003\015\026\016\013\023\006\024\044\001\001\000\002" +
    "\001\001\000\030\003\007\004\032\005\015\007\027\010" +
    "\024\014\003\015\026\016\013\023\006\024\005\025\203" +
    "\001\001\000\026\003\007\004\032\005\015\007\027\010" +
    "\024\014\003\015\026\016\013\023\006\024\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public LinkedList<Instrucciones> AST;
  
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  
    public LinkedList<Instrucciones> getAST() {
        return AST;
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= INSTRUCCIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instrucciones> a = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
   
    parser.AST=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instrucciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instrucciones> a = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a; RESULT.add(b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instrucciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new LinkedList<>(); RESULT.add(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DEFPRINT 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= DECLARACIONFUNCIONES 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= DECLARACIONMETODOS 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= INSTRUCCIONRET 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= LLAMADAFUNCIONCOMOEXPRESION PTCOMA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= EXEC LLAMADAFUNCIONCOMOEXPRESION PTCOMA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT= new Exec(a, aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= INSTRUCCIONIF 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= INSTRUCCIONWHILE 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DEFPRINT ::= RIMPRIMIR PARIZQ EXPRESION PARDER PTCOMA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT=new Imprimir(a,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFPRINT",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION ::= tipo IDENTIFICADOR PTCOMA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo.tipos a = (Tipo.tipos)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Declaracion(b,a,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= tipo IDENTIFICADOR ASIGNACION EXPRESION PTCOMA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Tipo.tipos a = (Tipo.tipos)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Declaracion(b,a,aleft,aright,c);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACIONFUNCIONES ::= tipo IDENTIFICADOR PARIZQ PARAMETROS PARDER LLAVEIZ INSTRUCCIONES LLAVEDER 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Tipo.tipos a = (Tipo.tipos)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instrucciones> c = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instrucciones> d = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT= new DeclaracionFunciones(a, b.toLowerCase(),d,aleft,aright,c);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONFUNCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACIONFUNCIONES ::= tipo IDENTIFICADOR PARIZQ PARDER LLAVEIZ INSTRUCCIONES LLAVEDER 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Tipo.tipos a = (Tipo.tipos)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instrucciones> d = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT= new DeclaracionFunciones(a, b.toLowerCase(),d,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONFUNCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACIONMETODOS ::= VOID IDENTIFICADOR PARIZQ PARAMETROS PARDER LLAVEIZ INSTRUCCIONES LLAVEDER 
            {
              Instrucciones RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instrucciones> c = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instrucciones> d = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT= new DeclaracionMetodos(b.toLowerCase(),d,bleft,bright,c);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONMETODOS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACIONMETODOS ::= VOID IDENTIFICADOR PARIZQ PARDER LLAVEIZ INSTRUCCIONES LLAVEDER 
            {
              Instrucciones RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instrucciones> d = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT= new DeclaracionMetodos(b.toLowerCase(),d,bleft,bright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONMETODOS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESION ::= EXPRESION SUMA EXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Aritmetica(Aritmetica.OperadorAritmetico.SUMA,aleft,aright,a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESION ::= EXPRESION RESTA EXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Aritmetica(Aritmetica.OperadorAritmetico.RESTA,aleft,aright,a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESION ::= EXPRESION MULT EXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Aritmetica(Aritmetica.OperadorAritmetico.MULT,aleft,aright,a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION ::= EXPRESION DIV EXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Aritmetica(Aritmetica.OperadorAritmetico.DIV,aleft,aright,a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION ::= EXPRESION POTE EXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Aritmetica(Aritmetica.OperadorAritmetico.POTE,aleft,aright,a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Aritmetica(Aritmetica.OperadorAritmetico.MODULO,aleft,aright,a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION ::= DIGITO 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Primitivo(Tipo.tipos.INT,a,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= DECIMAL 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Primitivo(Tipo.tipos.DOUBLE,a,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= CARACTERES 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Primitivo(Tipo.tipos.CHAR,a,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= IDENTIFICADOR 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Variable(aleft,aright, a.toLowerCase());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= PARRAF 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Primitivo(Tipo.tipos.STRING,a,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= BOOL 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Primitivo(Tipo.tipos.BOOLEAN,a,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= PARIZQ EXPRESION PARDER 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= EXPRESION MAYORIGUAL EXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Relacional( Relacional.OperadorRelacional.MAYORIGUAL, aleft, aright, a, b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= EXPRESION MENORIGUAL EXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Relacional( Relacional.OperadorRelacional.MENORIGUAL, aleft, aright, a, b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= EXPRESION IGUAL EXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Relacional( Relacional.OperadorRelacional.IGUAL, aleft, aright, a, b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= EXPRESION DIFERENCIA EXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Relacional( Relacional.OperadorRelacional.DIFERENCIA, aleft, aright, a, b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Relacional( Relacional.OperadorRelacional.MAYOR, aleft, aright, a, b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Relacional( Relacional.OperadorRelacional.MENOR, aleft, aright, a, b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Logica( Logica.OperadorLogico.OR, aleft, aright, a, b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Logica( Logica.OperadorLogico.AND, aleft, aright, a, b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= NOT EXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Logica( Logica.OperadorLogico.NOT, aleft, aright, a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESIONDECREMENTO 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= LLAMADAFUNCIONCOMOEXPRESION 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESIONDECREMENTO ::= EXPRESION INCREMENT 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Incremento(a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONDECREMENTO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESIONDECREMENTO ::= EXPRESION DECREMENT 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Decremento(a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONDECREMENTO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipo ::= INT 
            {
              Tipo.tipos RESULT =null;
		RESULT=Tipo.tipos.INT;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipo ::= DOUBLE 
            {
              Tipo.tipos RESULT =null;
		RESULT=Tipo.tipos.DOUBLE;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipo ::= BOOLEAN 
            {
              Tipo.tipos RESULT =null;
		RESULT=Tipo.tipos.BOOLEAN;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipo ::= CHAR 
            {
              Tipo.tipos RESULT =null;
		RESULT=Tipo.tipos.CHAR;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipo ::= STRING 
            {
              Tipo.tipos RESULT =null;
		RESULT=Tipo.tipos.STRING;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INSTRUCCIONRET ::= RETORNO PTCOMA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new InstruccionReturn(aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONRET",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INSTRUCCIONRET ::= RETORNO EXPRESION PTCOMA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new InstruccionReturn( aleft, aright, a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONRET",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LLAMADAFUNCIONCOMOEXPRESION ::= IDENTIFICADOR PARIZQ PARAMETROSLLAMADA PARDER 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instrucciones> b = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new LlamadaFunciones(a.toLowerCase(), aleft, aright, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNCIONCOMOEXPRESION",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LLAMADAFUNCIONCOMOEXPRESION ::= IDENTIFICADOR PARIZQ PARDER 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT=new LlamadaFunciones(a.toLowerCase(), aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNCIONCOMOEXPRESION",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PARAMETROSLLAMADA ::= PARAMETROSLLAMADA COMA EXPRESION 
            {
              LinkedList<Instrucciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instrucciones> a = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSLLAMADA",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PARAMETROSLLAMADA ::= EXPRESION 
            {
              LinkedList<Instrucciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new LinkedList<Instrucciones>(); RESULT.add(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSLLAMADA",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PARAMETROS ::= PARAMETROS COMA tipo IDENTIFICADOR 
            {
              LinkedList<Instrucciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Instrucciones> a = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo.tipos b = (Tipo.tipos)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; RESULT.add(new Declaracion(c.toLowerCase(), b,aleft,aright));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PARAMETROS ::= tipo IDENTIFICADOR 
            {
              LinkedList<Instrucciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo.tipos a = (Tipo.tipos)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new LinkedList<Instrucciones>(); RESULT.add(new Declaracion(b.toLowerCase(), a,aleft,aright)); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INSTRUCCIONIF ::= IF PARIZQ EXPRESION PARDER LLAVEIZ INSTRUCCIONES LLAVEDER 
            {
              Instrucciones RESULT =null;
		//RESULT = new InstruccionIf($3, $6, @1.first_line, @1.first_column); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONIF",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INSTRUCCIONIF ::= IF PARIZQ EXPRESION PARDER LLAVEIZ INSTRUCCIONES LLAVEDER ELSE LLAVEIZ INSTRUCCIONES LLAVEDER 
            {
              Instrucciones RESULT =null;
		//RESULT = new InstruccionIfElse($3, $6, $10, @1.first_line, @1.first_column); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONIF",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INSTRUCCIONIF ::= IF PARIZQ EXPRESION PARDER LLAVEIZ INSTRUCCIONES LLAVEDER ELSE INSTRUCCIONIF 
            {
              Instrucciones RESULT =null;
		//RESULT = new InstruccionIfElseIf($3, $6, $9, @1.first_line, @1.first_column); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONIF",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INSTRUCCIONWHILE ::= WHILE PARIZQ EXPRESION PARDER LLAVEIZ INSTRUCCIONES LLAVEDER 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instrucciones> b = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		//RESULT = new InstruccionWhile(a, b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONWHILE",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
