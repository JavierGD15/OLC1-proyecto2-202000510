package OLC1PROYECTO2.Analizadores;
import java_cup.runtime.Symbol; 
import java.util.LinkedList;
import OLC1PROYECTO2.Arbol.Declaracion;
import OLC1PROYECTO2.Arbol.Instrucciones; 
import OLC1PROYECTO2.Arbol.Imprimir; 
import OLC1PROYECTO2.Arbol.Tipo;
import OLC1PROYECTO2.Arbol.DeclaracionFunciones; 
import OLC1PROYECTO2.Arbol.DeclaracionMetodos; 
import OLC1PROYECTO2.Arbol.LlamadaFunciones; 
import OLC1PROYECTO2.Arbol.InstruccionReturn; 
import OLC1PROYECTO2.Arbol.InstruccionIf; 
import OLC1PROYECTO2.Arbol.InstruccionIfElse; 
import OLC1PROYECTO2.Arbol.InstruccionIfElseIf; 
import OLC1PROYECTO2.Arbol.InstruccionWhile; 
import OLC1PROYECTO2.Arbol.Exec; 
import OLC1PROYECTO2.Analizadores.Expresiones.Aritmetica; 
import OLC1PROYECTO2.Analizadores.Expresiones.Primitivo; 
import OLC1PROYECTO2.Analizadores.Expresiones.Relacional; 
import OLC1PROYECTO2.Analizadores.Expresiones.Logica; 
import OLC1PROYECTO2.Analizadores.Expresiones.Variable; 
import OLC1PROYECTO2.Analizadores.Expresiones.Incremento; 
import OLC1PROYECTO2.Analizadores.Expresiones.Decremento; 

parser code{:
    
    public LinkedList<Instrucciones> AST;
  
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  
    public LinkedList<Instrucciones> getAST() {
        return AST;
    }
    
:}


/*--------------- 2da Area: Declaraciones -----------------------*/

//------> declaracion de terminales 

terminal String INT,DOUBLE,BOOLEAN, CHAR,STRING, IGUAL, DIFERENCIA, MENOR, MENORIGUAL,
        MAYOR,  MAYORIGUAL,  OR, AND, NOT, SUMA, RESTA, MULT, DIV, POTE, MODULO,
        DOSPT, FIN, PTCOMA, PT, COMA, LLAVEIZ, LLAVEDER,INTERR,  DIGITO, SIGNO,
        LETRA, ESPACIO, ESPECIAL, ASIGNACION, IDENTIFICADOR, PARRAF, COMENTARIO,
        DECIMAL, CARACTERES, RIMPRIMIR, PARIZQ,PARDER,UMENOS, BOOL, RETORNO, VOID,
        EXEC,IF,ELSE,SWITCH,CASE,DEFAULT,BREAK,WHILE,FOR,DO,INCREMENT,DECREMENT;

//------> declaracion de no terminales
non terminal Programa;
non terminal Instrucciones DEFPRINT;
non terminal Instrucciones INSTRUCCIONRET;
non terminal Instrucciones DECLARACION;
non terminal Instrucciones EXPRESION;
non terminal Instrucciones INSTRUCCIONIF;
non terminal Instrucciones INSTRUCCIONWHILE;
non terminal Instrucciones EXPRESIONDECREMENTO;
non terminal LinkedList<Instrucciones> PARAMETROS;
non terminal LinkedList<Instrucciones> PARAMETROSLLAMADA;
non terminal Instrucciones DECLARACIONFUNCIONES;
non terminal Instrucciones DECLARACIONMETODOS;
non terminal Instrucciones LLAMADAFUNCIONCOMOEXPRESION;
non terminal Operacion expresion_numerica;
non terminal LinkedList<Instrucciones> else_ifs;
non terminal Operacion expresion_cadena;
non terminal Operacion expresion_logica;

non terminal Tipo.tipos tipo;
non terminal Instrucciones INSTRUCCION;
non terminal LinkedList<Instrucciones> INSTRUCCIONES;

//------> precedencia
precedence left OR;
precedence left AND;
precedence left IGUAL, DIFERENCIA;
precedence left MENOR, MENORIGUAL, MAYOR, MAYORIGUAL;
precedence left SUMA, RESTA;
precedence left MULT, DIV;
precedence right NOT;
precedence right MODULO;
precedence right POTE;
precedence right UMENOS; 

start with Programa;

Programa ::= INSTRUCCIONES:a  {:
   
    parser.AST=a;
:};

INSTRUCCIONES::= INSTRUCCIONES:a INSTRUCCION:b {:RESULT=a; RESULT.add(b);:}
                | INSTRUCCION :a{:RESULT=new LinkedList<>(); RESULT.add(a);:}
                ;
INSTRUCCION::= 
             DEFPRINT:a {:RESULT=a;:}
            |DECLARACION:a {:RESULT=a;:}
            |DECLARACIONFUNCIONES:a  {:RESULT=a;:}  
            |DECLARACIONMETODOS:a  {:RESULT=a;:}  
            |INSTRUCCIONRET:a  {:RESULT=a;:} 
            |LLAMADAFUNCIONCOMOEXPRESION:a PTCOMA  {:RESULT=a;:} 
            |EXEC LLAMADAFUNCIONCOMOEXPRESION:a PTCOMA {:RESULT= new Exec(a, aleft,aright); :}
            |INSTRUCCIONIF:a     {:RESULT=a;:} 
            |INSTRUCCIONWHILE:a     {:RESULT=a;:} 
            ; 
DEFPRINT::=
RIMPRIMIR PARIZQ EXPRESION:a PARDER PTCOMA                          {:RESULT=new Imprimir(a,aleft,aright);:} //imprimir
;

DECLARACION ::= 
              tipo:a IDENTIFICADOR:b PTCOMA {:RESULT=new Declaracion(b,a,aleft,aright);:} //declarar sin datos
             |tipo:a IDENTIFICADOR:b ASIGNACION EXPRESION:c PTCOMA {:RESULT=new Declaracion(b,a,aleft,aright,c);:} //declarar con datos
;

DECLARACIONFUNCIONES::=  
    tipo:a IDENTIFICADOR:b PARIZQ 
    PARAMETROS:c PARDER LLAVEIZ INSTRUCCIONES:d LLAVEDER                                              {:RESULT= new DeclaracionFunciones(a, b.toLowerCase(),d,aleft,aright,c);:}                        
    |tipo:a IDENTIFICADOR:b PARIZQ PARDER LLAVEIZ INSTRUCCIONES:d LLAVEDER                            {:RESULT= new DeclaracionFunciones(a, b.toLowerCase(),d,aleft,aright);:}
;

DECLARACIONMETODOS::=  
    VOID IDENTIFICADOR:b PARIZQ 
    PARAMETROS:c PARDER LLAVEIZ INSTRUCCIONES:d LLAVEDER                                              {:RESULT= new DeclaracionMetodos(b.toLowerCase(),d,bleft,bright,c);:}                        
    |VOID IDENTIFICADOR:b PARIZQ PARDER LLAVEIZ INSTRUCCIONES:d LLAVEDER                              {:RESULT= new DeclaracionMetodos(b.toLowerCase(),d,bleft,bright);:}
;





EXPRESION::= EXPRESION:a SUMA EXPRESION:b                       {:RESULT=new Aritmetica(Aritmetica.OperadorAritmetico.SUMA,aleft,aright,a,b);:}
|  EXPRESION:a RESTA EXPRESION:b                                {:RESULT=new Aritmetica(Aritmetica.OperadorAritmetico.RESTA,aleft,aright,a,b);:}
|  EXPRESION:a MULT EXPRESION:b                                 {:RESULT=new Aritmetica(Aritmetica.OperadorAritmetico.MULT,aleft,aright,a,b);:}
|  EXPRESION:a DIV EXPRESION:b                                  {:RESULT=new Aritmetica(Aritmetica.OperadorAritmetico.DIV,aleft,aright,a,b);:}
|  EXPRESION:a POTE EXPRESION:b                                 {:RESULT=new Aritmetica(Aritmetica.OperadorAritmetico.POTE,aleft,aright,a,b);:}
|  EXPRESION:a MODULO EXPRESION:b                               {:RESULT=new Aritmetica(Aritmetica.OperadorAritmetico.MODULO,aleft,aright,a,b);:}
|  DIGITO:a                                                     {:RESULT=new Primitivo(Tipo.tipos.INT,a,aleft,aright);:}
|  DECIMAL:a                                                    {:RESULT=new Primitivo(Tipo.tipos.DOUBLE,a,aleft,aright);:}
|  CARACTERES:a                                                 {:RESULT=new Primitivo(Tipo.tipos.CHAR,a,aleft,aright);:}
|  IDENTIFICADOR:a                                              {:RESULT=new Variable(aleft,aright, a.toLowerCase());:}
|  PARRAF: a                                                    {:RESULT=new Primitivo(Tipo.tipos.STRING,a,aleft,aright);:}
|  BOOL: a                                                      {:RESULT=new Primitivo(Tipo.tipos.BOOLEAN,a,aleft,aright);:}
|  PARIZQ EXPRESION:a  PARDER                                   {:RESULT=a;:}  
| EXPRESION:a MAYORIGUAL EXPRESION:b        {:RESULT=new Relacional( Relacional.OperadorRelacional.MAYORIGUAL, aleft, aright, a, b); :}
| EXPRESION:a MENORIGUAL EXPRESION:b        {:RESULT=new Relacional( Relacional.OperadorRelacional.MENORIGUAL, aleft, aright, a, b); :}
| EXPRESION:a IGUAL EXPRESION:b             {:RESULT=new Relacional( Relacional.OperadorRelacional.IGUAL, aleft, aright, a, b); :}
| EXPRESION:a DIFERENCIA EXPRESION:b        {:RESULT=new Relacional( Relacional.OperadorRelacional.DIFERENCIA, aleft, aright, a, b); :}
| EXPRESION:a MAYOR EXPRESION:b         {:RESULT=new Relacional( Relacional.OperadorRelacional.MAYOR, aleft, aright, a, b); :}
| EXPRESION:a MENOR EXPRESION:b         {:RESULT=new Relacional( Relacional.OperadorRelacional.MENOR, aleft, aright, a, b); :}
| EXPRESION:a OR EXPRESION:b            {:RESULT=new Logica( Logica.OperadorLogico.OR, aleft, aright, a, b); :}
| EXPRESION:a AND EXPRESION:b           {:RESULT=new Logica( Logica.OperadorLogico.AND, aleft, aright, a, b); :}
| NOT EXPRESION:a                     {:RESULT=new Logica( Logica.OperadorLogico.NOT, aleft, aright, a); :}
| EXPRESIONDECREMENTO:a              {:RESULT=a;:} 
|LLAMADAFUNCIONCOMOEXPRESION:a        {:RESULT=a;:} 
    
;

EXPRESIONDECREMENTO::= EXPRESION:a INCREMENT {:RESULT=new Incremento(a, aleft, aright); :}
    | EXPRESION:a DECREMENT {:RESULT=new Decremento(a, aleft, aright); :}
;


tipo ::= INT  {:RESULT=Tipo.tipos.INT;:}
       | DOUBLE  {:RESULT=Tipo.tipos.DOUBLE;:}
       | BOOLEAN  {:RESULT=Tipo.tipos.BOOLEAN;:}
       | CHAR  {:RESULT=Tipo.tipos.CHAR;:}
       | STRING  {:RESULT=Tipo.tipos.STRING;:}
       ;

INSTRUCCIONRET::= 
      RETORNO:a PTCOMA                       {:RESULT=new InstruccionReturn(aleft, aright); :}
    | RETORNO EXPRESION:a PTCOMA           {:RESULT=new InstruccionReturn( aleft, aright, a); :}
;


LLAMADAFUNCIONCOMOEXPRESION::= IDENTIFICADOR:a PARIZQ PARAMETROSLLAMADA:b PARDER {:RESULT=new LlamadaFunciones(a.toLowerCase(), aleft, aright, b);:}
    | IDENTIFICADOR:a PARIZQ PARDER                   {:RESULT=new LlamadaFunciones(a.toLowerCase(), aleft, aright); :}
;

PARAMETROSLLAMADA::= PARAMETROSLLAMADA:a COMA EXPRESION:b   {:RESULT = a; RESULT.add(b); :}
    | EXPRESION:a                          {:RESULT=new LinkedList<Instrucciones>(); RESULT.add(a);:}
;

PARAMETROS::= PARAMETROS:a COMA tipo:b IDENTIFICADOR:c {:RESULT = a; RESULT.add(new Declaracion(c.toLowerCase(), b,aleft,aright));:}
                | tipo:a IDENTIFICADOR:b               {:RESULT=new LinkedList<Instrucciones>(); RESULT.add(new Declaracion(b.toLowerCase(), a,aleft,aright)); 
        :};

INSTRUCCIONIF ::= IF PARIZQ EXPRESION PARDER 
        LLAVEIZ 
            INSTRUCCIONES 
        LLAVEDER                       {://RESULT = new InstruccionIf($3, $6, @1.first_line, @1.first_column); :}            
    | IF PARIZQ EXPRESION PARDER 
        LLAVEIZ
            INSTRUCCIONES 
        LLAVEDER ELSE 
        LLAVEIZ
            INSTRUCCIONES
        LLAVEDER                        {://RESULT = new InstruccionIfElse($3, $6, $10, @1.first_line, @1.first_column); :}
    | IF PARIZQ EXPRESION PARDER 
        LLAVEIZ 
            INSTRUCCIONES 
        LLAVEDER ELSE INSTRUCCIONIF     {://RESULT = new InstruccionIfElseIf($3, $6, $9, @1.first_line, @1.first_column); :}
;


INSTRUCCIONWHILE::= WHILE PARIZQ EXPRESION:a PARDER
        LLAVEIZ
            INSTRUCCIONES:b
        LLAVEDER                        {://RESULT = new InstruccionWhile(a, b,aleft,aright); :}
;


